@model ApplicationPlanCadre.Models.PlanCadre
@using ApplicationPlanCadre.Models;

@{
    ViewBag.Titre = Model.titreCours;
    string idRecherche = "";
    <input type="hidden" id="tableRecherche" name="tableRecherche" value="Cours">
}

@Html.Action("ListeProgramme", "Programme", new { idPlan = @ViewBag.idPlanCadreActuel })


<div class="super-view">

    <header class="fat-header">

        <h3>Plan cadre</h3>

        <h1>@ViewBag.Titre</h1>
        <hr />

        <h3>@Html.DisplayFor(m => m.numeroCours)</h3>

    </header>

    <div class="plan-cadre-table-container">

        <table class="plan-cadre-table">

            <tr>

                <th style="width:20%">Objectif - Énoncé des compétences</th>

                <th style="width:45%">Standard - Contexte de réalisation</th>

                <th style="width:35%">Indication pédagogiques, s'il y a lieu</th>

            </tr>

            @foreach (var planCadreCompetence in Model.PlanCadreCompetence)
            {
                <tr>

                    <td style="width:20%">
                        <p>@Html.DisplayFor(m => planCadreCompetence.EnonceCompetence.description) (@Html.DisplayFor(m => planCadreCompetence.EnonceCompetence.codeCompetence))</p>
                        <p>@Html.DisplayFor(m => planCadreCompetence.ponderationEnHeure) heures</p>
                    </td>

                    <td style="width:45%">
                        <ul class="hyphen-list">
                            @foreach (var contexteRealisation in planCadreCompetence.EnonceCompetence.ContexteRealisation)
                            {
                                <li>@Html.DisplayFor(m => contexteRealisation.description)</li>
                            }
                        </ul>
                    </td>

                    @if (planCadreCompetence == Model.PlanCadreCompetence.First())
                    {
                        <td rowspan="@Model.PlanCadreCompetence.Count()" style="width:35%">
                            @Html.DisplayFor(m => Model.indicationPedago)
                        </td>
                    }

                </tr>
            }
        </table>

        @foreach (var planCadreCompetence in Model.PlanCadreCompetence)
        {
            idRecherche = "enc" + planCadreCompetence.idPlanCadreCompetence.ToString() + "enc";
            <table class="plan-cadre-table">

                <tr>
                    <th colspan="4" id="@idRecherche">
                        @Html.DisplayFor(m => planCadreCompetence.EnonceCompetence.description) (@Html.DisplayFor(m => planCadreCompetence.EnonceCompetence.codeCompetence))
                    </th>
                </tr>

                <tr>

                    <th style="width:15%">
                        Éléments de compétence
                    </th>

                    <th style="width:30%">
                        Critères de performance
                    </th>

                    <th style="width:30%">
                        Éléments de connaissances
                    </th>

                    <th style="width:25%">
                        Activités d'apprentissage suggérées
                    </th>

                </tr>

                @for (int i = 0; i < planCadreCompetence.PlanCadreElement.Count(); i++)
                {
                    var planCadreElement = planCadreCompetence.PlanCadreElement.ElementAt(i);
                    var elementCompetence = planCadreElement.ElementCompetence;
                    idRecherche = "el" + elementCompetence.idElement.ToString();

                    <tr>

                        <td style="width:15%">
                            <ol start="@elementCompetence.numero">
                                <li id="@idRecherche"> @Html.DisplayFor(m => elementCompetence.description)</li>
                            </ol>
                        </td>

                        <td style="width:30%">
                            <ol>
                                @foreach (var criterePerformance in planCadreElement.ElementCompetence.CriterePerformance)
                                {
                                    <li>@Html.DisplayFor(m => criterePerformance.description)</li>
                                }
                            </ol>
                        </td>

                        @{
                            bool isPreviousUsingSameConnaissance = false;
                            if (i > 0)
                            {
                                var previousPlanCadreElement = planCadreCompetence.PlanCadreElement.ElementAt(i - 1);
                                isPreviousUsingSameConnaissance = previousPlanCadreElement.ElementConnaissance == planCadreElement.ElementConnaissance;
                            }

                            bool isThereConnaissanceFollowing = false;
                            int connaissanceRowspan = 1;
                            for (int j = i + 1; j < planCadreCompetence.PlanCadreElement.Count(); j++)
                            {
                                var followingPlanCadreElement = planCadreCompetence.PlanCadreElement.ElementAt(j);
                                if (followingPlanCadreElement.ElementConnaissance == planCadreElement.ElementConnaissance)
                                {
                                    isThereConnaissanceFollowing = true;
                                    connaissanceRowspan++;
                                }
                                else
                                {
                                    break;
                                }

                            }
                        }

                        @if (!isPreviousUsingSameConnaissance)
                        {
                            if (isThereConnaissanceFollowing)
                            {
                                <td rowspan="@connaissanceRowspan" class="rich-cell">
                                    @foreach (var elementConnaissance in planCadreElement.ElementConnaissance)
                                    {
                                        <ul>@Html.Raw(elementConnaissance.description)</ul>

                                        foreach (var sousElementConnaissance in elementConnaissance.SousElementConnaissance)
                                        {
                                            <li>@Html.Raw(sousElementConnaissance.descSousElement)</li>
                                        }
                                    }
                                </td>
                            }
                            else
                            {
                                <td class="rich-cell">
                                    <ul>
                                        @foreach (var elementConnaissance in planCadreElement.ElementConnaissance)
                                        {
                                            <li>@Html.Raw(elementConnaissance.description)</li>

                                            <ul>
                                                @foreach (var sousElementConnaissance in elementConnaissance.SousElementConnaissance)
                                                {
                                                    <li>@Html.Raw(sousElementConnaissance.descSousElement)</li>
                                                }
                                            </ul>
                                        }
                                    </ul>
                                </td>
                            }
                        }

                        @{
                            bool isPreviousUsingSameActivite = false;
                            if (i > 0)
                            {
                                var previousPlanCadreElement = planCadreCompetence.PlanCadreElement.ElementAt(i - 1);
                                isPreviousUsingSameActivite = previousPlanCadreElement.ActiviteApprentissage == planCadreElement.ActiviteApprentissage;
                            }

                            bool isThereActiviteFollowing = false;
                            int activiteRowspan = 1;
                            for (int j = i + 1; j < planCadreCompetence.PlanCadreElement.Count(); j++)
                            {
                                var followingPlanCadreElement = planCadreCompetence.PlanCadreElement.ElementAt(j);
                                if (followingPlanCadreElement.ElementConnaissance == planCadreElement.ElementConnaissance)
                                {
                                    isThereActiviteFollowing = true;
                                    activiteRowspan++;
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }

                        @if (!isPreviousUsingSameActivite)
                        {
                            if (isThereActiviteFollowing)
                            {
                                <td rowspan="@activiteRowspan" class="rich-cell">
                                    @foreach (var activite in planCadreElement.ActiviteApprentissage)
                                    {
                                        <ul>@Html.Raw(activite.descActivite)</ul>

                                        foreach (var sousActivite in activite.SousActiviteApprentissage)
                                        {
                                            <li>@Html.Raw(sousActivite.nomSousActivite)</li>
                                        }
                                    }
                                </td>
                            }
                            else
                            {
                                <td class="rich-cell">
                                    <ul>
                                        @foreach (var activite in planCadreElement.ActiviteApprentissage)
                                        {
                                            <li>@Html.Raw(activite.descActivite)</li>
                                            <ul>
                                                @foreach (var sousActivite in activite.SousActiviteApprentissage)
                                                {
                                                    <li>@Html.Raw(sousActivite.nomSousActivite)</li>
                                                }
                                            </ul>
                                        }
                                    </ul>
                                </td>
                            }
                        }

                    </tr>
                }
            </table>
        }

        <table class="plan-cadre-table">

            <tr>

                <th style="width:50%">
                    Environnement physique
                </th>

                <th style="width:50%">
                    Ressources didactiques suggérées
                </th>

            </tr>

            <tr>

                <td style="width:50%" class="rich-cell">
                    <ul>
                        @foreach (var environnement in Model.EnvironnementPhysique)
                        {
                            <li>@Html.Raw(environnement.nomEnvPhys)</li>
                            <ul>
                                @foreach (var sousEnvironnement in environnement.SousEnvironnementPhysique)
                                {
                                    <li>@Html.Raw(sousEnvironnement.nomSousEnvPhys)</li>
                                }
                            </ul>
                        }
                    </ul>

                </td>

                <td style="width:50%" class="rich-cell">
                    <ul>
                        @foreach (var ressource in Model.RessourceDidactique)
                        {
                            <li>@Html.Raw(ressource.nomRessource)</li>
                            <ul>
                                @foreach (var sousRessource in ressource.SousRessourceDidactique)
                                {
                                    <li>@Html.Raw(sousRessource.nomSousRessource)</li>
                                }
                            </ul>
                        }
                    </ul>
                </td>

            </tr>

        </table>

    </div>

    <hr class="end-div" />

    <div class="menu-flottant">
        <a class="fancy-button blanc" onclick="location.href='@Url.Action("Info", "Programme", new { idProgramme = Model.idProgramme })'"><span class="glyphicon glyphicon-triangle-left"></span>Retour</a>
        <!--<a class="fancy-button" href='@Url.Action("Modifier", new { idPlanCadre = Model.idPlanCadre })'><span class="glyphicon glyphicon-pencil"></span> Modifier</a>-->

    </div>
</div>

<script>
    $(("#p" + @Model.Programme.idProgramme)).collapse('show');
    $(("#pc" + @Model.idPlanCadre + "element")).addClass('active');
    $(("#pc" + @Model.idPlanCadre)).collapse('show');

</script>
